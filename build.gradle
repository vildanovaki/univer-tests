plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.8.1'
    id "io.freefair.lombok" version "6.0.0-m2"
}

repositories {
    mavenCentral()
}

def allureVersion = "2.17.3",
    selenideVersion = "5.24.0",
    junitVersion = '5.9.2'

allure {
    version = allureVersion
    autoconfigure = true
    aspectjweaver = true
    configuration = "testImplementation"
    useJUnit5 {
        version = allureVersion
    }
}

dependencies {
    testImplementation(
            'org.aspectj:aspectjweaver:1.9.19',
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "com.github.javafaker:javafaker:1.0.2",
            "io.rest-assured:rest-assured:4.3.1",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "org.aeonbits.owner:owner:1.0.12",
            "org.assertj:assertj-core:3.19.0",
            "org.slf4j:slf4j-simple:1.7.29",
            "org.junit.jupiter:junit-jupiter:$junitVersion")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = 11
    targetCompatibility = 11
}

tasks.withType(Test) {
    systemProperties(System.getProperties())
    useJUnitPlatform()

    if (System.getProperty("threads") != null) {
        systemProperties += [
                'junit.jupiter.execution.parallel.enabled'                 : true,
                'junit.jupiter.execution.parallel.mode.default'            : 'concurrent',
                'junit.jupiter.execution.parallel.mode.classes.default'    : 'concurrent',
                'junit.jupiter.execution.parallel.config.strategy'         : 'fixed',
                'junit.jupiter.execution.parallel.config.fixed.parallelism': System.getProperty("threads").toInteger()
        ]
    }

    testLogging {
        lifecycle {
            events "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }
}

task auction_Tests(type: Test) {
    useJUnitPlatform {
        includeTags 'auction_Tests'
    }
}

task blog_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'blog_tests'
    }
}

task authorization_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'authorization_tests'
    }
}

task breeder_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'breeder_tests'
    }
}


task chat_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'chat_tests'
    }
}

task customer_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'customer_tests'
    }
}

task faqs_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'faqs_tests'
    }
}

task knowledge_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'knowledge_tests'
    }
}

task pets_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'pets_tests'
    }
}

task review_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'review_tests'
    }
}

task request_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'request_tests'
    }
}

task sale_tests(type: Test) {
    useJUnitPlatform {
        includeTags 'sale_tests'
    }
}

task smoke(type: Test) {
    useJUnitPlatform {
        includeTags 'smoke'
    }
}

task regression(type: Test) {
    useJUnitPlatform {
        includeTags 'regression'
    }
}
